Const FT_PINCFG_MCP_CS = 3
Const FT_PINCFG_WRITE_ENABLE = 4
Const FT_PINCFG_RST = 5
Const FT_PINCFG_CHIP_ENABLE = 6
Const FT_PINCFG_READ_ENABLE = 7

Const FT_EPROM_WRITE = &HFF
Const FT_EPROM_READ = &H00

Enum FT_EPROM_IO
	FTE_INPUT
	FTE_OUTPUT
End Enum

Class FT232H_GBA_ROM
Protected 
	dummy AS DWord
	Data AS DWord
	dir AS FT_EPROM_IO
	mcp As *FT232H_MCP23017
	bRomEnalbe AS BOOL
	bReadEnable AS BOOL
	bWriteEnable AS BOOL
	lastAddress AS DWord

	'Area Read Request Command Buffer Cache
	cacheBuf AS BytePtr		' キャッシュバッファ
	cacheBufUsage AS DWord	' キャッシュバッファのサイズ
	cacheARR_Len AS DWord' キャシュしたときのAreaReadRequestの読み取りサイズ
'	cacheMiss AS DWord

Public
	ft AS *FT232H
	spi As *FT232H_SPI
	gpio As *FT232H_GPIO
Public
	Sub FT232H_GBA_ROM(ftc AS *FT232H)
		ft=ftc
		'最適化のため
		spi=ft->spi
		gpio=ft->gpio

		'FT232H PIN direction config
		ft->gpio->setACBusDir(&HFF)
		ft->gpio->setADBusDir(&HF0)

		'ここでSPIの初期設定を行うので、↑のADバスのリセットを下に持っていかないこと！
		mcp=new FT232H_MCP23017(ft,FT_PINCFG_MCP_CS,20)
		mcp->SetPort(&H0000,&H0000)

		'CtrlBus Init
		bRomEnalbe=TRUE
		bReadEnable=TRUE
		bWriteEnable=TRUE

		RomEnable(FALSE)
		ReadEnable(FALSE)
		WriteEnable(FALSE)
		'RST
		ft->gpio->setADBusBit(FT_PINCFG_RST,1)

		'A0-A16 Zero Clear
		mcp->SetPortValWord(0)

		dir=FTE_INPUT
		SetDatabusDirection(FTE_OUTPUT)
		ft->gpio->setACBusDir(FT_EPROM_WRITE)

		ft->flush()		

		cacheBuf=calloc(ft->getBufSize())
		cacheARR_Len=0

		lastAddress=&HFFFFFFFF
		'DBM(ex"init end\n")
	End Sub

	Sub SetAddress(adr AS DWord)
		adr=adr>>1

		'/CE Low
		RomEnable(FALSE)

		'Set Address 23-16
		SetDatabusDirection(FTE_OUTPUT)
		ft->gpio->setACBus((adr>>16) And &HFF)

		'Set Address 15-0
		mcp->SetPortValWord(adr And &HFFFF)

		'CE High
		RomEnable(TRUE)

		SetDatabusDirection(FTE_INPUT)
	End Sub

	Sub dumpCmdBuf(filename AS BytePtr)
		ft->dumpCmdBuf(filename)
	End Sub

	Sub AreaReadRequest(adr AS DWord,length As DWord)
		'アドレスラッチが必要ない場合はしない
		if adr<>lastAddress Then _
			SetAddress(adr)

		'コマンドのキャッシュの存在をチェック
		if cacheARR_Len<>length Then
			Dim i AS DWord
			Dim bufStart AS DWord
			bufStart=ft->getBufUsage()

			Dim len_harf AS DWord
			len_harf=length>>1
			Do
				'ReadEnable(TRUE) '最適化のため展開		
				gpio->setADBusBit(FT_PINCFG_READ_ENABLE,0)

				'Read
				'mcp->ReadPortRequestWord() '最適化のため展開					
				'spi->DeviceEnable(FT_PINCFG_MCP_CS,TRUE)
				gpio->setADBusBit(FT_PINCFG_MCP_CS,0)
					spi->sendData(ex"\x41\x12",2)
					spi->reciveRequest(2)
				'spi->DeviceEnable(FT_PINCFG_MCP_CS,FALSE)	
				gpio->setADBusBit(FT_PINCFG_MCP_CS,1)

				'ReadEnable(FALSE) '最適化のため展開
				gpio->setADBusBit(FT_PINCFG_READ_ENABLE,1)

				i++
				if len_harf<=i Then ExitDo
			Loop
			bReadEnable=FALSE

			'コマンドをキャッシュする
			cacheBufUsage=ft->getBufUsage()-bufStart
			memcpy(cacheBuf,ft->getCmdBuf()+bufStart,cacheBufUsage)
			cacheARR_Len=length
			'cacheMiss++
			'printf(ex"\n\ncache miss:%d, len=%d    \n\n",cacheMiss,length)
			
		Else
			'キャッシュされたコマンドバッファを転送
			ft->addReadRequest(cacheBuf,cacheBufUsage,length)
		End If

		lastAddress=adr+length
	End Sub

	Function SloveRomSize() AS DWord
		Const GBA_SIZESLOVE_SAMPLE_SIZE = 1024*10
		Const GBA_SIZESLOVE_SETP = &H100000*4
		Const GBA_SIZESLOVE_OFFSET = &H0000
		Dim head As BytePtr, inbuf AS BytePtr,i AS Long

		head  = calloc(GBA_SIZESLOVE_SAMPLE_SIZE)
		inbuf = calloc(GBA_SIZESLOVE_SAMPLE_SIZE)

		Do
			AreaReadRequest(GBA_SIZESLOVE_SETP*i+GBA_SIZESLOVE_OFFSET,GBA_SIZESLOVE_SAMPLE_SIZE)
			FT_SendCommands()
			FT_ReceiveData(inbuf,GBA_SIZESLOVE_SAMPLE_SIZE)

			if isFilled(inbuf,GBA_SIZESLOVE_SAMPLE_SIZE,&HFF)=TRUE Then ExitDo	'SAMPLE_SIZE分がFFで埋められていたら
			if i=0 Then
				memcpy(head,inbuf,GBA_SIZESLOVE_SAMPLE_SIZE)
			Else
				if isSameBin(inbuf,head,GBA_SIZESLOVE_SAMPLE_SIZE)=TRUE Then ExitDo	'先頭と比較
			Endif
			i++
		Loop

		SloveRomSize=i*GBA_SIZESLOVE_SETP

		free(head)
		free(inbuf )
	End Function

	Function FT_SendCommands() AS BOOL
		FT_SendCommands = ft->sendCommands()
	End Function

	Function FT_ReceiveData(data AS BytePtr,length AS DWord) AS BOOL
		FT_ReceiveData = ft->reciveData(data,length)
	End Function

protected


	Sub RomEnable(ef AS BOOL)
		if bRomEnalbe <> ef Then 
			ft->gpio->setADBusBit(FT_PINCFG_CHIP_ENABLE,not(ef) AND &H01)
			bRomEnalbe=ef
		End If
	End Sub
	

	Sub ReadEnable(ef AS BOOL)
		if bReadEnable <> ef Then
			ft->gpio->setADBusBit(FT_PINCFG_READ_ENABLE,not(ef) AND &H01)
			bReadEnable=ef
		End If
	End Sub

	Sub WriteEnable(ef AS BOOL)
		if bWriteEnable <> ef Then
			ft->gpio->setADBusBit(FT_PINCFG_WRITE_ENABLE,not(ef) AND &H01)
			bWriteEnable=ef
		End If
	End Sub	

	
	Sub SetDatabusDirection(idr AS FT_EPROM_IO)
		if dir=idr Then  ExitSub
		dir=idr
		if idr=FTE_INPUT Then
			mcp->SetPortDirWord(&HFFFF)
		Else
			mcp->SetPortDirWord(&H0000)
		End If
	End Sub
End Class
/*
Class FT232H_DMGROM : Inherits FT232H_PPROM_BASE
Public
	Sub FT232H_DMGROM(ftc AS *FT232H)
		init(ftc)
	End Sub

	Function AreaWirte(adr AS DWord,buffer AS BytePtr,length AS DWord) AS BOOL
		Dim i AS DWord,checkBuf AS BytePtr,tmp AS DWord

		ft->flush()

		For i=0 To length-1
			SetAddress(adr+i,TRUE)

			WriteByte(buffer[i])

			if i Mod &H10=0 Then ft->sendCommands()
		Next i
		
		'ft->addCommand(ex"\x9c\xa0\x00",3)	'wait 55us 0x0080

		AreaWirte=TRUE '戻り値：OK

		'書き込みチェック
		checkBuf = calloc(length+5)
		AreaReadRequest(adr,length)
		ft->sendCommands()
		ft->reciveData(checkBuf,length)

		For i=0 To length-1
			if buffer[i] <> checkBuf[i] Then
				AreaWirte=FALSE	'戻り値:NG
				ExitFor
			End If
		Next i

		free(checkBuf)
	End Function
	
	'このルーチンには一切のムダがないのでいじらないこと（20190905現ざう）
	Sub WriteByte(data AS Byte)
		ReadEnable(FALSE)

		'PROGRAM
'		ft->addCommand(ex"\x9c\x09\x00",3)	'Wait 
		
		SetData(data)	'SET WRITE DATA
	'	ft->addCommand(ex"\x9c\x20\x00",3)	'Wait

		WriteEnable(TRUE)
		ft->addCommand(ex"\x9c\xf0\x00",3)	'wait 55us

		WriteEnable(FALSE)

		ReadEnable(TRUE)
		'wait 4us
'		ft->addCommand(ex"\x9c\x20\x00",3)	'wait

'		ReadEnable(TRUE)
		SetData(&HFF)'次のデータで誤らないように	[必要]

'		SetDatabusDirection(FTE_INPUT)
'		ReadEnable(TRUE)
'		ft->addCommand(ex"\x9c\x09\x00",3)
	End Sub
	
Private
	
End Class


:*/